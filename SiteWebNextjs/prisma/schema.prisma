// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nom       String?
  email     String?   @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Define your MongoDB datasource

// Define the model for annees
model Annee {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  annee       Int
  specialites Specialite[] // One Annee can have many Specialites
}

model Specialite {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  nom      String
  anneeId  String    @db.ObjectId
  annee    Annee     @relation(fields: [anneeId], references: [id])
  sections Section[]
}

model Section {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  nom             String
  specialite_name String
  specialite      Specialite @relation(fields: [specialiteId], references: [id])
  specialiteId    String     @db.ObjectId
  annee           Int
  groupes         Groupe[] // One Section can have many Groupes
  modules         Module[] // One Section can have many Modules
  capacite        Int?
}

model Groupe {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nom       String
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String  @db.ObjectId
}

model Module {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  nom_module String
  nb_cours   Int?
  td         Boolean
  tp         Boolean
  section    Section @relation(fields: [sectionId], references: [id])
  sectionId  String  @db.ObjectId
}

// Define the model for rooms
model Room {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  nom           String
  type          String
  capacite      Int
  disponibilite String[]
}

model Professor {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  nom                 String
  prenom              String
  gender              String
  email               String             @unique
  numero_de_telephone String
  date_de_naissance   DateTime
  grade               String
  availability_prof   String[]
  modules             ModuleAssignment[] // Relation field to ModuleAssignment
}

model ModuleAssignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  professorId String    @db.ObjectId
  professor   Professor @relation(fields: [professorId], references: [id])
  priority    Int
  nom_module  String
}

model Configuration {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String
  value String
}

model AcademicYear {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  year         Int
  specialities Speciality[]
}

model Speciality {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  academicYear   AcademicYear        @relation(fields: [academicYearId], references: [id])
  academicYearId String              @db.ObjectId
  sections       SpecialitySection[]
}

model SpecialitySection {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  speciality   Speciality      @relation(fields: [specialityId], references: [id])
  specialityId String          @db.ObjectId
  schedule     ScheduleEntry[]
}

model ScheduleEntry {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  day         String
  group       String
  moduleName  String
  room        String
  sessionType String // use camelCase 'sessionType' for consistency
  slot        Int
  teacher     String
  time        String
  section     SpecialitySection @relation(fields: [sectionId], references: [id])
  sectionId   String            @db.ObjectId
}
